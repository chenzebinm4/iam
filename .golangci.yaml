# 运行选项.
run:
  # 并发值是CPU的数量.
  concurrency: 2
  # 分析超时.
  timeout: 5m
  # 发现问题退出码.
  issues-exit-code: 1
  # 是否包含测试文件.
  tests: true
  # 构建标签列表，所有 linter 都使用它.
  build-tags:
    - mytag
  # 跳过哪些目录，可以使用正则.
  skip-dirs:
    - docs
  # 允许跳过默认目录:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true
  # 跳过哪些文件.
  skip-files:
    - ".*\\.my\\.go$"
    - _test.go
  # 允许运行多个并行 golangci-lint 实例.
  allow-parallel-runners: true
  # 定义Go版本限制，主要与泛型有关.
  go: '1.18'

# 输出选项.
output:
  # 输出格式: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  # 允许打印有代码问题的行
  print-issued-lines: true
  # 在问题文本的末尾打印 linter 名称.
  print-linter-name: true
  # 使问题输出按行唯一.
  uniq-by-line: true
  # 为输出文件引用添加前缀.
  path-prefix: ""
  # 按以下方式对结果进行排序：文件路径、行和列.
  sort-results: true

linters:
  # 禁用所有 linter.
  disable-all: true
  # 启用特定 linter.
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    - cyclop
    - deadcode
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - exhaustivestruct
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gci
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - golint
    - gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ifshort
    - importas
    - ineffassign
    - interfacer
    - ireturn
    - lll
    - makezero
    - maligned
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - nlreturn
    - noctx
    - nolintlint
    - nosprintfhostport
    - paralleltest
    - prealloc
    - predeclared
    - promlinter
    - revive
    - rowserrcheck
    - scopelint
    - sqlclosecheck
    - staticcheck
    - structcheck
    - stylecheck
    - tagliatelle
    - tenv
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - varnamelen
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl
  # 启用预设.
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused
  # 从启用的 linters 集中快速运行.
  fast: false

issues:
  # 要排除的问题文本的正则表达式列表.
  exclude:
    - test/.*
    - third_party/.*
  # 每个路径、linter、每个文本、源的排除设置
  exclude-rules:
    # 排除在测试文件上运行的一些 linter.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # 排除 `staticcheck` 的一些信息.
    - linters:
        - staticcheck
      text: "SA9003:"
    # 使用 "go:generate" 排除 lll 的长行问题.
    - linters:
        - lll
      source: "^//go:generate "
  # 使用默认排除模式.
  # 要列出所有默认排除的模式，执行"golangci-lint run --help".
  exclude-use-default: true
  # exclude 和 exclude-rules 的正则是否区分大小写
  exclude-case-sensitive: false
  # 禁用排除的id列表
  include:
    - EXC0002 # 禁用排除有关来自 golint 评论的问题.
  # 每个 linter 的最大问题数，0为不限制.
  max-issues-per-linter: 0
  # 相同文本的最大问题数，0为不限制.
  max-same-issues: 0
  # 是否仅显式新问题.
  new: false
  # 允许支持修复的 linter 自动修复问题.
  fix: true

severity:
  # 设置问题的默认严重性.
  default-severity: error
  # 正则表达式是否区分大小写.
  case-sensitive: false
  # 严重性规则列表.
  rules:
    - linters:
        - dupl
      severity: info